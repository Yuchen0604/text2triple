import re
from typing import List, Dict, Set, Tuple

def calculate_precision_recall_f1(gold: set, pred: set) -> Tuple[float, float, float]:

    """
    Method to calculate precision, recall and f1:
        Precision is calculated as correct_triples/predicted_triples and
        Recall as correct_triples/gold_triples
        F1 as the harmonic mean of precision and recall.
    :param gold: items in the gold standard
    :param pred: items in the system prediction
    :return:
        p: float - precision
        r: float - recall
        f1: float - F1

    Example: 
    gold: {
    'newyorklocatedinunitedstates', 
    'berlincapitalofgermany', 
    'pariscapitaloffrance', 
    'machinelearningisaaifield'
    }
    pred: {
    'newyorklocatedinusa', 
    'berlincapitalofgermany', 
    'pariscapitaloffrance', 
    'aiisaatechnology'
    }
    """
    if len(pred) == 0:
        return 0, 0, 0
    p = len(gold.intersection(pred)) / len(pred)
    r = len(gold.intersection(pred)) / len(gold)
    if p + r > 0:
        f1 = 2 * ((p * r) / (p + r))
    else:
        f1 = 0
    return p, r, f1

def normalize_triple(sub_label: str, rel_label: str, obj_label: str) -> str:
    """
    Normalize triples for comparison in precision, recall calculations
    :param sub_label: subject string
    :param rel_label: relation string
    :param obj_label: object string
    :return: a normalized triple as a single concatenated string

    Example:
    >>> normalize_triple("New York", "located_in", "United States")
    'newyorklocatedinunitedstates'

    >>> normalize_triple("Machine_Learning", "is_a", "AI Field")
    'machinelearningisaaifield'
    """
    # remove spaces and underscores and make lower case
    sub_label = re.sub(r"(_|\s+)", '', sub_label).lower()
    rel_label = re.sub(r"(_|\s+)", '', rel_label).lower()
    obj_label = re.sub(r"(_|\s+)", '', obj_label).lower()
    # concatenate them to a single string
    tr_key = f"{sub_label}{rel_label}{obj_label}"
    return tr_key

def get_ontology_conformance(ontology: Dict, triples: List) -> Tuple[float, float]:
    """
    Calculate the ontology conformance and relation hallucination metrics.
    :param ontology: ontology to take into account with the concepts and relations
    :param triples: a set of triples generated by the system
    :return:
        ont_conformance: float - ontology conformance metric
        rel_hallucination: float - relation hallucination metric = 1 - ontology conformance
    """
    if len(triples) == 0:
        return 1, 0
    # replace spaces with underscores in the ontology relations
    ont_rels = [rel['label'].replace(" ", "_") for rel in ontology['relations']]
    # count the number of system triples relations that are in the ontology
    num_rels_conformant = len([tr for tr in triples if tr[1] in ont_rels])

    # ontology conformance is the number of system triples relations in the ontology divided by the total number of system triples
    ont_conformance = num_rels_conformant / len(triples)
    # relation hallucination is 1 - ontology conformance
    rel_hallucination = 1 - ont_conformance
    return ont_conformance, rel_hallucination

def convert_to_dict(data: List[Dict], id_name: str = "id") -> Dict:
    """
    Utility method to convert a list to a dictionary
    :param data: a list of dictionary objects
    :param id_name: the attribute to be used as the key for the dictionary
    :return: a dictionary with the same content as the list
    """
    return {item[id_name]: item for item in data}

